apiVersion: aam.globalsphare.com/v1alpha1
kind: WorkloadVendor
metadata:
  name: worker
spec: |
  import "mod/context"
  import "mod/configmap"
  import "mod/storage"

  parameter: {
    image: string
    cmd?: [...string]
    args?: [...string]
    cpu?: string
    env?: [...{
      name:   string
      value?: string
      valueFrom?: {
        secretKeyRef: {
          name: string
          key:  string
        }
      }
    }]
    after?: string
  }

  construct: {
    statefulsetheadless: {
      apiVersion: "v1"
      kind:       "Service"
      metadata: {
        name:      "\(context.componentName)-headless"
        namespace: context.namespace
        labels: {
          "component": context.componentName
          "app": context.appName
        }
      }
      spec: {
        clusterIP: "None"
        selector: {
          "component": context.componentName
          "app": context.appName
        }
      }
    }
  }

  construct: "\(context.componentName)-statefulset":{
    apiVersion: "apps/v1"
    kind:       "StatefulSet"
    metadata: {
      name:      context.componentName
      namespace: context.namespace
    }
    spec: {
      selector: matchLabels: {
        "app": context.appName
        "component": context.componentName
      }
      replicas:    1
      serviceName: "\(context.componentName)-headless"
      template: {
        metadata: labels: {
          "app": context.appName
          "component": context.componentName
        }

        spec: {
          serviceAccountName: context.appName
          if parameter["after"] != _|_ {
            initContainers: [
              {
                name: "init"
                image: "harbor1.zlibs.com/island/centos:7"
                command: ["/bin/sh"]
                args: ["-c", "while true; do curl 'http://island-api.island-system/status/\(context.namespace)/\(parameter.after)' | grep '\"result\":1'; if [ $? -ne 0 ]; then sleep 4s; continue; else break; fi; done"]
              }
            ]
          }
          containers: [{
            name:  "main"
            image: parameter.image
            imagePullPolicy: "Always"

            if parameter["cmd"] != _|_ {
              command: parameter.cmd
            }

            if parameter["args"] != _|_ {
              args: parameter.args
            }

            if parameter["env"] != _|_ {
              env: parameter.env
            }

            if parameter["cpu"] != _|_ {
              resources: {
                limits:
                  cpu: parameter.cpu
                requests:
                  cpu: parameter.cpu
              }
            }

            volumeMounts: [
              for k, v in parameter.configs if v["subPath"] != _|_ {
                name:      "\(context.componentName)-\(k)"
                mountPath: "\(v.path)/\(v.subPath)"
                subPath:   v.subPath
              },
              for k, v in parameter.configs if v["subPath"] == _|_ {
                name:      "\(context.componentName)-\(k)"
                mountPath: v.path
              }
              if context.appName == "island-console" {
                name:      "island-info"
                mountPath: "/etc/island-info"
              },
              if parameter.storage != _|_ {
                  if parameter.storage.capacity != "" {
                    name:      "storage-\(context.componentName)"
                    mountPath: parameter.storage.path
                }
              }
            ]
          }, {
            name:  "status"
            image: "harbor1.zlibs.com/island/centos:7"
            command: ["/bin/sh", "-c", "while true; do resp=`curl -X PUT -H 'Content-Type: application/json' -d '{\"message\": \"部署成功\"}' http://island-api.island-system/status/\(context.namespace)/\(context.componentName)/1 | grep '\"code\":0' | wc -l `; if [[ $resp -ne 1 ]]; then sleep 30s; else sleep 3600d ; fi; done"]
          }]

        volumes: [
          for k, v in parameter.configs if v["subPath"] != _|_ {
            name:      "\(context.componentName)-\(k)"
            configMap: name: "\(context.componentName)-\(k)"
          }
          for k, v in parameter.configs if v["subPath"] == _|_ {
            name:      "\(context.componentName)-\(k)"
            configMap: name: "\(context.componentName)-\(k)"
          }
          if context.appName == "island-console" {
            name: "island-info"
            configMap: name: "island-info"
          },
          if parameter.storage != _|_ {
            if parameter.storage.capacity!= "" {
              name: "storage-\(context.componentName)"
              persistentVolumeClaim: claimName: "storage-\(context.componentName)"
            }
          }
        ]
      }
      }
    }
  }

  //引入dependency的实现
  import "mod/dependency"