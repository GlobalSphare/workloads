apiVersion: aam.globalsphare.com/v1alpha1
kind: WorkloadVendor
metadata:
  name: consul
spec: |
  import "mod/context"
  import "mod/configmap"

  parameter: {
  	image:  *"harbor1.zlibs.com/cs/consul:1.7.1" | string
  	after?: string
  }

  construct: "\(context.componentName)-deployment": {
  	apiVersion: "apps/v1"
  	kind:       "Deployment"
  	metadata: {
  		name:      context.componentName
  		namespace: context.namespace
  	}
  	spec: {
  		selector: matchLabels: {
  			"app":       context.appName
  			"component": context.componentName
  		}
  		template: {
  			metadata: labels: {
  				"app":       context.appName
  				"component": context.componentName
  			}
  			spec: {
  				serviceAccountName: context.appName
  				if parameter["after"] != _|_ {
  					initContainers: [
  						{
  							name:  "init"
  							image: "harbor1.zlibs.com/island/centos:7"
  							command: ["/bin/sh"]
  							args: ["-c", "while true; do curl 'http://island-api.island-system/status/\(context.namespace)/\(parameter.after)' | grep '\"result\":1'; if [ $? -ne 0 ]; then sleep 4s; continue; else break; fi; done"]
  						},
  					]
  				}
  				containers: [{
  					name:            "main"
  					image:           parameter.image
  					imagePullPolicy: "Always"
  					volumeMounts: [
  						for k, v in parameter.configs if v["subPath"] != _|_ {
  							name:      "\(context.componentName)-\(k)"
  							mountPath: "\(v.path)/\(v.subPath)"
  							subPath:   v.subPath
  						},
  						for k, v in parameter.configs if v["subPath"] == _|_ {
  							name:      "\(context.componentName)-\(k)"
  							mountPath: v.path
  						},
  						{
  							name:      "storage-\(context.componentName)"
  							mountPath: "/consul/data"
  						},
  					]
  				}, {
  					name:  "status"
  					image: "harbor1.zlibs.com/island/centos:7"
  					command: ["/bin/sh", "-c", "while true; do resp=`curl -X PUT -H 'Content-Type: application/json' -d '{\"message\": \"部署成功\"}' http://island-api.island-system/status/\(context.namespace)/\(context.componentName)/1 | grep '\"code\":0' | wc -l `; if [[ $resp -ne 1 ]]; then sleep 30s; else sleep 3600d ; fi; done"]
  				}]

  				volumes: [
  					for k, v in parameter.configs if v["subPath"] != _|_ {
  						name: "\(context.componentName)-\(k)"
  						configMap: name: "\(context.componentName)-\(k)"
  					},
  					for k, v in parameter.configs if v["subPath"] == _|_ {
  						name: "\(context.componentName)-\(k)"
  						configMap: name: "\(context.componentName)-\(k)"
  					}, {
  						name: "storage-\(context.componentName)"
  						persistentVolumeClaim: claimName: "storage-\(context.componentName)"
  					},
  				]
  			}
  		}
  		if parameter["storage"] != _|_ {
  			volumeClaimTemplates: [{
  				metadata: name: "storage-\(context.componentName)"
  				spec: {
  					accessModes: ["ReadWriteOnce"]
  					storageClassName: "rook-ceph-block"
  					resources: requests: storage: parameter.storage.capacity
  				}
  			}]
  		}
  	}
  }

  construct: "serviceinternal": {
  	apiVersion: "v1"
  	kind:       "Service"
  	metadata: {
  		name:      context.componentName
  		namespace: context.namespace
  	}
  	spec: {
  		selector: {
  			"app":       context.appName
  			"component": context.componentName
  		}
  		ports: [
  			{
  				name:       "http"
  				port:       8500
  				targetPort: 8500
  			}, {
  				name:       "https"
  				port:       8443
  				targetPort: 8443
  			}, {
  				name:       "rpc"
  				port:       8400
  				targetPort: 8400
  			}, {
  				name:       "serflan-tcp"
  				port:       8301
  				targetPort: 8301
  			}, {
  				name:       "serflan-udp"
  				port:       8301
  				targetPort: 8301
  				protocol:   "UDP"
  			}, {
  				name:       "serfwan-tcp"
  				port:       8302
  				targetPort: 8302
  			}, {
  				name:       "serfwan-udp"
  				port:       8302
  				targetPort: 8302
  				protocol:   "UDP"
  			}, {
  				name:       "server"
  				port:       8300
  				targetPort: 8300
  			}, {
  				name:       "consuldns"
  				port:       8600
  				targetPort: 8600
  			},
  		]
  	}
  }

  construct: "\(context.componentName)-viewer": {
  	"apiVersion": "security.istio.io/v1beta1"
  	"kind":       "AuthorizationPolicy"
  	"metadata": {
  		"name":      "\(context.componentName)-viewer"
  		"namespace": context.namespace
  	}
  	"spec": {
  		"selector": {
  			"matchLabels": {
  				"app":       context.appName
  				"component": context.componentName
  			}
  		}
  		"rules": [
  			{
  				to: [
  					{
  						operation: {
  							methods: ["GET", "POST", "DELETE", "PUT", "HEAD", "OPTIONS", "PATCH"]
  						}
  					},
  				]
  			},
  		]
  	}
  }
